Epoch 1
-------------------------------
loss: 0.055091  [    1/ 5000]
loss: 0.223684  [ 1001/ 5000]
loss: 0.003248  [ 2001/ 5000]
loss: 0.167506  [ 3001/ 5000]
loss: 0.852181  [ 4001/ 5000]
Test Error: 
 Accuracy: 73.8%, Avg loss: 0.810227 

Epoch 2
-------------------------------
loss: 0.000488  [    1/ 5000]
loss: 1.232006  [ 1001/ 5000]
loss: 0.460558  [ 2001/ 5000]
loss: 0.010880  [ 3001/ 5000]
loss: 2.494305  [ 4001/ 5000]
Test Error: 
 Accuracy: 74.1%, Avg loss: 0.833229 

Epoch 3
-------------------------------
loss: 0.008134  [    1/ 5000]
loss: 0.000067  [ 1001/ 5000]
loss: 0.001747  [ 2001/ 5000]
loss: 2.247398  [ 3001/ 5000]
loss: 0.219697  [ 4001/ 5000]
Test Error: 
 Accuracy: 71.8%, Avg loss: 0.798957 

Epoch 4
-------------------------------
loss: 0.000018  [    1/ 5000]
loss: 0.171498  [ 1001/ 5000]
loss: 2.165905  [ 2001/ 5000]
loss: 0.007262  [ 3001/ 5000]
loss: 0.000267  [ 4001/ 5000]
Test Error: 
 Accuracy: 72.7%, Avg loss: 0.757516 

Epoch 5
-------------------------------
loss: 1.806722  [    1/ 5000]
loss: 0.002683  [ 1001/ 5000]
loss: 0.473053  [ 2001/ 5000]
loss: 2.414358  [ 3001/ 5000]
loss: 0.754168  [ 4001/ 5000]
Test Error: 
 Accuracy: 74.5%, Avg loss: 0.703462 

Epoch 6
-------------------------------
loss: 0.232970  [    1/ 5000]
loss: 0.040294  [ 1001/ 5000]
---------------------------------------------------------------------------
UnboundLocalError                         Traceback (most recent call last)
Cell In[27], line 6
      4 for t in range(epochs):
      5     print(f"Epoch {t+1}\n-------------------------------")
----> 6     train(train_dataloader, model, loss_fn, optimizer)
      7     test(test_dataloader, model, loss_fn)
      8 print("Done!")

Cell In[26], line 21, in train(dataloader, model, loss_fn, optimizer)
     19     else:
     20         break
---> 21 pred = model(X)
     22 loss = loss_fn(pred, y)
     23 loss.backward()

File ~\AppData\Local\Programs\Python\Python311\Lib\site-packages\torch\nn\modules\module.py:1511, in Module._wrapped_call_impl(self, *args, **kwargs)
   1509     return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]
   1510 else:
-> 1511     return self._call_impl(*args, **kwargs)

File ~\AppData\Local\Programs\Python\Python311\Lib\site-packages\torch\nn\modules\module.py:1520, in Module._call_impl(self, *args, **kwargs)
   1515 # If we don't have any hooks, we want to skip the rest of the logic in
   1516 # this function, and just call forward.
   1517 if not (self._backward_hooks or self._backward_pre_hooks or self._forward_hooks or self._forward_pre_hooks
   1518         or _global_backward_pre_hooks or _global_backward_hooks
   1519         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1520     return forward_call(*args, **kwargs)
   1522 try:
   1523     result = None

Cell In[6], line 38, in NeuralNetwork.forward(self, q)
     36     else:
     37         break
---> 38 output = self.out(rnn_out)
     39 return output

UnboundLocalError: cannot access local variable 'rnn_out' where it is not associated with a value